create table "public"."recurring_payments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "supplier_name" text not null,
    "amount" real not null,
    "date" date not null,
    "paid" boolean not null default false
);


alter table "public"."recurring_payments" enable row level security;

CREATE UNIQUE INDEX "recurring_payments_pkey" ON public."recurring_payments" USING btree (id);

alter table "public"."recurring_payments" add constraint "recurring_payments_pkey" PRIMARY KEY using index "recurring_payments_pkey";

alter table "public"."recurring_payments" add constraint "recurring_payments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recurring_payments" validate constraint "recurring_payments_user_id_fkey";

grant select on table "public"."recurring_payments" to "authenticated";

grant delete on table "public"."recurring_payments" to "service_role";

grant insert on table "public"."recurring_payments" to "service_role";

grant references on table "public"."recurring_payments" to "service_role";

grant select on table "public"."recurring_payments" to "service_role";

grant trigger on table "public"."recurring_payments" to "service_role";

grant truncate on table "public"."recurring_payments" to "service_role";

grant update on table "public"."recurring_payments" to "service_role";

create policy "Enable read access for all users"
on "public"."recurring_payments"
as permissive
for select
to public
using ((auth.uid() = user_id));



